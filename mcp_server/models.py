# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T04:50:16+00:00

from __future__ import annotations

from datetime import datetime, time
from enum import Enum
from ipaddress import IPv4Address
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import AnyUrl, BaseModel, EmailStr, Field, RootModel, constr


class ApiKey(BaseModel):
    authorizedEntities: List[str] = Field(
        ...,
        description='The group/service ids (prefixed by group_ or service_ on which the key is authorized',
        examples=[['a string value']],
    )
    clientId: str = Field(
        ...,
        description='The unique id of the Api Key. Usually 16 random alpha numerical characters, but can be anything',
        examples=['a string value'],
    )
    clientName: str = Field(
        ...,
        description='The name of the api key, for humans ;-)',
        examples=['a string value'],
    )
    clientSecret: str = Field(
        ...,
        description='The secret of the Api Key. Usually 64 random alpha numerical characters, but can be anything',
        examples=['a string value'],
    )
    dailyQuota: Optional[int] = Field(
        None, description='Authorized number of calls per day', examples=[123]
    )
    enabled: bool = Field(
        ...,
        description="Whether or not the key is enabled. If disabled, resources won't be available to calls using this key",
        examples=[True],
    )
    metadata: Optional[Dict[str, str]] = Field(
        None, description='Bunch of metadata for the key', examples=[{'key': 'value'}]
    )
    monthlyQuota: Optional[int] = Field(
        None, description='Authorized number of calls per month', examples=[123]
    )
    throttlingQuota: Optional[int] = Field(
        None,
        description='Authorized number of calls per second, measured on 10 seconds',
        examples=[123],
    )


class Auth0Config(BaseModel):
    callbackUrl: str = Field(
        ..., description='Auth0 callback URL', examples=['a string value']
    )
    clientId: str = Field(
        ..., description='Auth0 client id', examples=['a string value']
    )
    clientSecret: str = Field(
        ..., description='Auth0 client secret', examples=['a string value']
    )
    domain: str = Field(..., description='Auth0 domain', examples=['a string value'])


class BadResponse(BaseModel):
    body: str = Field(
        ..., description='The body of the HTTP response', examples=['a string value']
    )
    headers: Dict[str, str] = Field(
        ..., description='The HTTP headers of the response', examples=[{'key': 'value'}]
    )
    status: int = Field(
        ..., description='The HTTP status for the response', examples=[123123]
    )


class BadResponsesFaultConfig(BaseModel):
    ratio: float = Field(
        ...,
        description='The percentage of requests affected by this fault. Value should be between 0.0 and 1.0',
        examples=[42.2],
    )
    responses: List[BadResponse] = Field(..., description='The possibles responses')


class Certificate(BaseModel):
    autoRenew: str = Field(
        ...,
        description='Allow Otoroshi to renew the certificate (if self signed)',
        examples=['a string value'],
    )
    ca: str = Field(
        ..., description='Certificate is a CA (read only)', examples=['a string value']
    )
    caRef: str = Field(
        ...,
        description='Reference for a CA certificate in otoroshi',
        examples=['a string value'],
    )
    chain: str = Field(
        ...,
        description='Certificate chain of trust in PEM format',
        examples=['a string value'],
    )
    domain: str = Field(
        ...,
        description='Domain of the certificate (read only)',
        examples=['a string value'],
    )
    from_: str = Field(
        ...,
        alias='from',
        description='Start date of validity',
        examples=['a string value'],
    )
    id: str = Field(
        ..., description='Id of the certificate', examples=['a string value']
    )
    privateKey: str = Field(
        ..., description='PKCS8 private key in PEM format', examples=['a string value']
    )
    selfSigned: str = Field(
        ...,
        description='Certificate is self signed  read only)',
        examples=['a string value'],
    )
    subject: str = Field(
        ...,
        description='Subject of the certificate (read only)',
        examples=['a string value'],
    )
    to: str = Field(
        ..., description='End date of validity', examples=['a string value']
    )
    valid: str = Field(
        ..., description='Certificate is valid (read only)', examples=['a string value']
    )


class CleverSettings(BaseModel):
    consumerKey: str = Field(
        ..., description='CleverCloud consumer key', examples=['a string value']
    )
    consumerSecret: str = Field(
        ..., description='CleverCloud consumer token', examples=['a string value']
    )
    orgaId: str = Field(
        ..., description='CleverCloud organization id', examples=['a string value']
    )
    secret: str = Field(
        ..., description='CleverCloud oauth secret', examples=['a string value']
    )
    token: str = Field(
        ..., description='CleverCloud oauth token', examples=['a string value']
    )


class ClientConfig(BaseModel):
    backoffFactor: int = Field(
        ...,
        description='Specify the factor to multiply the delay for each retry',
        examples=[123123],
    )
    callTimeout: int = Field(
        ...,
        description='Specify how long each call should last at most in milliseconds',
        examples=[123123],
    )
    globalTimeout: int = Field(
        ...,
        description='Specify how long the global call (with retries) should last at most in milliseconds',
        examples=[123123],
    )
    maxErrors: int = Field(
        ...,
        description='Specify how many errors can pass before opening the circuit breaker',
        examples=[123123],
    )
    retries: int = Field(
        ...,
        description='Specify how many times the client will try to fetch the result of the request after an error before giving up.',
        examples=[123123],
    )
    retryInitialDelay: int = Field(
        ...,
        description='Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor',
        examples=[123123],
    )
    sampleInterval: int = Field(
        ...,
        description='Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted',
        examples=[123123],
    )
    useCircuitBreaker: bool = Field(
        ...,
        description='Use a circuit breaker to avoid cascading failure when calling chains of services. Highly recommended !',
        examples=[True],
    )


class ConsoleDataExporterConfig(BaseModel):
    pass


class CorsSettings(BaseModel):
    allowCredentials: bool = Field(
        ..., description='Allow to pass credentials', examples=[True]
    )
    allowHeaders: List[str] = Field(..., description='The cors allowed headers')
    allowMethods: List[str] = Field(..., description='The cors allowed methods')
    allowOrigin: str = Field(
        ..., description='The cors allowed origin', examples=['a string value']
    )
    enabled: bool = Field(
        ..., description='Whether or not cors is enabled', examples=[True]
    )
    excludedPatterns: List[str] = Field(..., description='The cors excluded patterns')
    exposeHeaders: List[str] = Field(..., description='The cors exposed header')
    maxAge: int = Field(..., description='Cors max age', examples=[123123])


class CustomDataExporterConfig(BaseModel):
    config: Dict[str, str] = Field(
        ..., description='Custom data exporter config', examples=[{'key': 'value'}]
    )
    ref: str = Field(..., description='Script Ref', examples=['a string value'])


class Typ(Enum):
    kafka = 'kafka'
    pulsar = 'pulsar'
    file = 'file'
    mailer = 'mailer'
    elastic = 'elastic'
    console = 'console'
    custom = 'custom'


class Deleted(BaseModel):
    deleted: bool = Field(..., examples=[True])


class Done(BaseModel):
    done: bool = Field(..., examples=[True])


class ESAlgoSettings(BaseModel):
    privateKey: Optional[str] = Field(
        None,
        description='The private key for the RSA function',
        examples=['a string value'],
    )
    publicKey: str = Field(
        ...,
        description='The public key for the RSA function',
        examples=['a string value'],
    )
    size: int = Field(
        ...,
        description='Size for SHA function. can be 256, 384 or 512',
        examples=[123123],
    )
    type: str = Field(
        ..., description='String with value ESAlgoSettings', examples=['a string value']
    )


class ElasticConfig(BaseModel):
    clusterUri: str = Field(
        ..., description='URL of the elastic cluster', examples=['a string value']
    )
    headers: Dict[str, str] = Field(
        ..., description='Additionnal http headers', examples=[{'key': 'value'}]
    )
    index: str = Field(
        ...,
        description='Index for events. Default is otoroshi-events',
        examples=['a string value'],
    )
    password: str = Field(
        ..., description='Optional password', examples=['a string value']
    )
    type: str = Field(
        ..., description='Type of events. Default is event', examples=['a string value']
    )
    user: str = Field(..., description='Optional user', examples=['a string value'])


class Environment(RootModel[str]):
    root: str = Field(
        ...,
        description='The name of the environment for service descriptors',
        examples=['prod'],
    )


class ErrorTemplate(BaseModel):
    messages: Dict[str, str] = Field(
        ..., description='Map for custom messages', examples=[{'key': 'value'}]
    )
    serviceId: str = Field(
        ...,
        description='The Id of the service for which the error template is enabled',
        examples=['a string value'],
    )
    template40x: str = Field(
        ..., description='The html template for 40x errors', examples=['a string value']
    )
    template50x: str = Field(
        ..., description='The html template for 50x errors', examples=['a string value']
    )
    templateBuild: str = Field(
        ..., description='The html template for build page', examples=['a string value']
    )
    templateMaintenance: str = Field(
        ...,
        description='The html template for maintenance page',
        examples=['a string value'],
    )


class ExposedApi(BaseModel):
    exposeApi: bool = Field(
        ...,
        description='Whether or not the current service expose an API with an Open API descriptor',
        examples=[True],
    )
    openApiDescriptorUrl: Optional[AnyUrl] = Field(
        None,
        description='The URL of the Open API descriptor',
        examples=['http://www.google.com'],
    )


class FileDataExporterConfig(BaseModel):
    path: str = Field(..., description='Path to file', examples=['a string value'])


class Filtering(BaseModel):
    exclude: Optional[List[Dict[str, str]]] = Field(
        None, description='Excluding pattern'
    )
    include: Optional[List[Dict[str, str]]] = Field(
        None, description='Including pattern'
    )


class Group(BaseModel):
    description: Optional[str] = Field(
        None, description='The descriptoin of the group', examples=['a string value']
    )
    id: str = Field(
        ...,
        description='The unique id of the group. Usually 64 random alpha numerical characters, but can be anything',
        examples=['a string value'],
    )
    name: str = Field(
        ..., description='The name of the group', examples=['a string value']
    )


class Gzip(BaseModel):
    blackList: List[str] = Field(
        ..., description='Blacklisted mime types. Wildcard supported'
    )
    bufferSize: int = Field(..., description='Size of the GZip buffer', examples=[123])
    chunkedThreshold: int = Field(
        ..., description='Threshold for chunking data', examples=[123]
    )
    compressionLevel: int = Field(
        ..., description='Compression level. From 0 to 9', examples=[123123]
    )
    enabled: bool = Field(
        ..., description='Whether gzip compression is enabled or not', examples=[True]
    )
    excludedPatterns: List[str] = Field(
        ..., description='Patterns that are excluded from gzipping'
    )
    whiteList: List[str] = Field(
        ..., description='Whitelisted mime types. Wildcard supported'
    )


class HSAlgoSettings(BaseModel):
    secret: str = Field(
        ...,
        description='The secret value for the HMAC function',
        examples=['a string value'],
    )
    size: int = Field(
        ...,
        description='Size for SHA function. can be 256, 384 or 512',
        examples=[123123],
    )
    type: str = Field(
        ..., description='String with value HSAlgoSettings', examples=['a string value']
    )


class HealthCheck(BaseModel):
    enabled: bool = Field(
        ...,
        description='Whether or not healthcheck is enabled on the current service descriptor',
        examples=[True],
    )
    url: Optional[AnyUrl] = Field(
        None, description='The URL to check', examples=['http://www.google.com']
    )


class Admin(BaseModel):
    createdAt: int = Field(
        ..., description='The creation date of the user', examples=[123]
    )
    label: str = Field(
        ..., description='The label for the user', examples=['a string value']
    )
    password: str = Field(
        ..., description='The hashed password of the user', examples=['a string value']
    )
    registration: Dict[str, str] = Field(
        ..., description='The U2F registration slug', examples=[{'key': 'value'}]
    )
    username: str = Field(
        ..., description='The email address of the user', examples=['a string value']
    )


class ServiceGroup(BaseModel):
    description: Optional[str] = Field(
        None, description='The descriptoin of the group', examples=['a string value']
    )
    id: str = Field(
        ...,
        description='The unique id of the group. Usually 64 random alpha numerical characters, but can be anything',
        examples=['a string value'],
    )
    name: str = Field(
        ..., description='The name of the group', examples=['a string value']
    )


class SimpleAdmin(BaseModel):
    createdAt: int = Field(
        ..., description='The creation date of the user', examples=[123]
    )
    label: str = Field(
        ..., description='The label for the user', examples=['a string value']
    )
    password: str = Field(
        ..., description='The hashed password of the user', examples=['a string value']
    )
    username: str = Field(
        ..., description='The email address of the user', examples=['a string value']
    )


class ImportExportStats(BaseModel):
    calls: int = Field(
        ..., description='Number of calls to Otoroshi globally', examples=[123]
    )
    dataIn: int = Field(
        ..., description='The amount of data sent to Otoroshi globally', examples=[123]
    )
    dataOut: int = Field(
        ...,
        description='The amount of data sent from Otoroshi globally',
        examples=[123],
    )


class InCookie(BaseModel):
    name: str = Field(
        ..., description='Name of the cookie', examples=['a string value']
    )
    type: str = Field(
        ..., description='String with value InCookie', examples=['a string value']
    )


class InHeader(BaseModel):
    name: str = Field(
        ..., description='Name of the header', examples=['a string value']
    )
    remove: str = Field(
        ...,
        description="Remove regex inside the value, like 'Bearer '",
        examples=['a string value'],
    )
    type: str = Field(
        ..., description='String with value InHeader', examples=['a string value']
    )


class InMemoryUser(BaseModel):
    email: str = Field(
        ..., description='Email of the user', examples=['a string value']
    )
    metadata: Dict[str, str] = Field(
        ..., description='Metadata of the user', examples=[{'key': 'value'}]
    )
    name: str = Field(..., description='Name of the user', examples=['a string value'])
    password: str = Field(
        ...,
        description='Password of the user (BCrypt hash)',
        examples=['a string value'],
    )


class InQueryParam(BaseModel):
    name: str = Field(
        ..., description='Name of the query param', examples=['a string value']
    )
    type: str = Field(
        ..., description='String with value InQueryParam', examples=['a string value']
    )


class IpFiltering(BaseModel):
    blacklist: List[IPv4Address] = Field(..., description='Blacklisted IP addresses')
    whitelist: List[IPv4Address] = Field(..., description='Whitelisted IP addresses')


class JWKSAlgoSettings(BaseModel):
    headers: Optional[Dict[str, str]] = Field(
        None, description='The headers for the http call', examples=[{'key': 'value'}]
    )
    kty: Optional[str] = Field(
        None, description='The type of key: RSA or EC', examples=['a string value']
    )
    timeout: Optional[int] = Field(
        None, description='The timeout of the http call', examples=[123]
    )
    ttl: Optional[int] = Field(
        None, description='The ttl of the keyset', examples=[123]
    )
    type: str = Field(
        ...,
        description='String with value JWKSAlgoSettings',
        examples=['a string value'],
    )
    url: Optional[str] = Field(
        None, description='The url for the http call', examples=['a string value']
    )


class KafkaConfig(BaseModel):
    keyPass: Optional[str] = Field(
        None, description='Optional keypass', examples=['a string value']
    )
    keyStore: Optional[str] = Field(
        None, description='Optional path to keystore', examples=['a string value']
    )
    servers: List[str] = Field(..., description='URLs of the kafka servers')
    topic: Optional[str] = Field(
        None,
        description='Optional kafka topic (otoroshi-events by default)',
        examples=['a string value'],
    )
    trustore: Optional[str] = Field(
        None, description='Optional path to trustore', examples=['a string value']
    )


class LargeRequestFaultConfig(BaseModel):
    additionalRequestSize: int = Field(
        ...,
        description='The size added to the request body in bytes. Added payload will be spaces only.',
        examples=[123123],
    )
    ratio: float = Field(
        ...,
        description='The percentage of requests affected by this fault. Value should be between 0.0 and 1.0',
        examples=[42.2],
    )


class LargeResponseFaultConfig(BaseModel):
    additionalRequestSize: Optional[int] = Field(
        None,
        description='The size added to the response body in bytes. Added payload will be spaces only.',
        examples=[123123],
    )
    ratio: float = Field(
        ...,
        description='The percentage of requests affected by this fault. Value should be between 0.0 and 1.0',
        examples=[42.2],
    )


class LatencyInjectionFaultConfig(BaseModel):
    from_: int = Field(
        ...,
        alias='from',
        description='The start range of latency added to the request',
        examples=[123123],
    )
    ratio: float = Field(
        ...,
        description='The percentage of requests affected by this fault. Value should be between 0.0 and 1.0',
        examples=[42.2],
    )
    to: int = Field(
        ...,
        description='The end range of latency added to the request',
        examples=[123123],
    )


class LdapAuthModuleConfig(BaseModel):
    adminPassword: str = Field(
        ..., description='The admin password', examples=['a string value']
    )
    adminUsername: str = Field(
        ..., description='The admin username', examples=['a string value']
    )
    desc: str = Field(
        ..., description='Description of the config', examples=['a string value']
    )
    emailField: str = Field(
        ...,
        description='Field name to get email from user profile',
        examples=['a string value'],
    )
    groupFilter: str = Field(
        ..., description='Filter for groups', examples=['a string value']
    )
    id: str = Field(
        ..., description='Unique id of the config', examples=['a string value']
    )
    name: str = Field(
        ..., description='Name of the config', examples=['a string value']
    )
    nameField: str = Field(
        ...,
        description='Field name to get name from user profile',
        examples=['a string value'],
    )
    otoroshiDataField: Optional[str] = Field(
        None,
        description='Field name to get otoroshi metadata from. You can specify sub fields using | as separator',
        examples=['a string value'],
    )
    searchBase: str = Field(
        ..., description='LDAP search base', examples=['a string value']
    )
    searchFilter: str = Field(
        ..., description='Filter for users', examples=['a string value']
    )
    serverUrl: str = Field(
        ..., description='URL of the ldap server', examples=['a string value']
    )
    sessionMaxAge: int = Field(
        ..., description='Max age of the session', examples=[123123]
    )
    type: str = Field(
        ..., description='Type of settings. value is ldap', examples=['a string value']
    )
    userBase: str = Field(
        ..., description='LDAP user base DN', examples=['a string value']
    )


class LdapUser(BaseModel):
    email: str = Field(
        ..., description='Email of the user', examples=['a string value']
    )
    metadata: Dict[str, str] = Field(
        ..., description='Metadata of the user', examples=[{'key': 'value'}]
    )
    name: str = Field(..., description='Name of the user', examples=['a string value'])


class Location(BaseModel):
    teams: List[Dict[str, str]] = Field(..., description='Team ids')
    tenant: str = Field(..., description='Tenant id', examples=['a string value'])


class Type(Enum):
    generic = 'generic'


class MailerConsoleExporterConfig(BaseModel):
    type: Optional[Type] = Field(None, description='Type of mailer')


class MailerGenericExporterConfig(BaseModel):
    headers: Optional[Dict[str, str]] = Field(
        None, description='Optional headers', examples=[{'key': 'value'}]
    )
    to: Optional[List[str]] = Field(None, description='Email adresses of recipents')
    type: Type = Field(..., description='Type of mailer')
    url: Optional[str] = Field(
        None, description='Url of mailer', examples=['a string value']
    )


class Type2(Enum):
    mailgun = 'mailgun'


class MailerMailgunExporterConfig(BaseModel):
    apiKey: Optional[str] = Field(
        None, description='Mailgun apiKey', examples=['a string value']
    )
    domain: Optional[str] = Field(
        None, description='Mailgun domain', examples=['a string value']
    )
    eu: Optional[bool] = Field(
        None, description='Whether the mailgun server is european', examples=[True]
    )
    to: Optional[List[EmailStr]] = Field(
        None, description='Email adresses of recipents'
    )
    type: Type2 = Field(..., description='Type of mailer')


class Type3(Enum):
    mailjet = 'mailjet'


class MailerMailjetExporterConfig(BaseModel):
    apiKeyPrivate: Optional[str] = Field(
        None, description='Mailjet private apiKey', examples=['a string value']
    )
    apiKeyPublic: Optional[str] = Field(
        None, description='Mailjet public apiKey', examples=['a string value']
    )
    to: Optional[List[EmailStr]] = Field(
        None, description='Email adresses of recipents'
    )
    type: Type3 = Field(..., description='Type of mailer')


class Type4(Enum):
    sendgrid = 'sendgrid'


class MailerSendgridExporterConfig(BaseModel):
    apiKeyPublic: Optional[str] = Field(
        None, description='Sendgrid apiKey', examples=['a string value']
    )
    to: Optional[List[EmailStr]] = Field(
        None, description='Email adresses of recipents'
    )
    type: Type4 = Field(..., description='Type of mailer')


class MailerSettings(BaseModel):
    apiKey: str = Field(
        ..., description='Mailgun mailer api key', examples=['a string value']
    )
    apiKeyPrivate: Optional[str] = Field(
        None, description='Mailjet mailer private api key', examples=['a string value']
    )
    apiKeyPublic: Optional[str] = Field(
        None, description='Mailjet mailer public api key', examples=['a string value']
    )
    domain: str = Field(
        ..., description='Mailgun mailer domain', examples=['a string value']
    )
    eu: Optional[bool] = Field(
        None, description='Mailgun mailer, use EU tenant api', examples=[True]
    )
    header: Optional[Dict[str, str]] = Field(
        None, description='Generic mailer headers', examples=[{'key': 'value'}]
    )
    type: Optional[str] = Field(
        None,
        description='Type of the mailer: console, generic, mailgun, mailjet',
        examples=['a string value'],
    )
    url: Optional[str] = Field(
        None, description='Generic mailer url', examples=['a string value']
    )


class MappingSettings(BaseModel):
    map: Dict[str, str] = Field(
        ..., description='Fields to rename', examples=[{'key': 'value'}]
    )
    remove: List[str] = Field(..., description='Fields to remove')
    values: Dict[str, str] = Field(
        ..., description='Fields to set', examples=[{'key': 'value'}]
    )


class Datastore(Enum):
    healthy = 'healthy'
    unhealthy = 'unhealthy'
    unreachable = 'unreachable'


class Otoroshi(Enum):
    healthy = 'healthy'
    unhealthy = 'unhealthy'
    down = 'down'


class OtoroshiHealth(BaseModel):
    datastore: Datastore
    otoroshi: Otoroshi


class Outage(BaseModel):
    descriptorId: str = Field(
        ..., description='The service impacted by outage', examples=['a string value']
    )
    descriptorName: str = Field(
        ...,
        description='The name of service impacted by outage',
        examples=['a string value'],
    )
    duration: int = Field(
        ..., description='The duration of the outage', examples=[123123]
    )
    until: time = Field(
        ..., description='The end of the outage', examples=['17:32:28.000']
    )


class OutageStrategy(Enum):
    OneServicePerGroup = 'OneServicePerGroup'
    AllServicesPerGroup = 'AllServicesPerGroup'


class Op(Enum):
    add = 'add'
    replace = 'replace'
    remove = 'remove'
    copy = 'copy'
    test = 'test'


class PatchItem(BaseModel):
    op: Op
    path: str = Field(..., examples=['a string value'])
    value: Optional[Any] = None


class Patch(RootModel[List[PatchItem]]):
    root: List[PatchItem] = Field(
        ...,
        description='A set of changes described in JSON Patch format: http://jsonpatch.com/ (RFC 6902)',
    )


class PulsarDataExporterConfig(BaseModel):
    namespace: str = Field(..., description='Namespace', examples=['a string value'])
    tenant: str = Field(..., description='Tenant', examples=['a string value'])
    topic: str = Field(..., description='Topic', examples=['a string value'])
    uri: List[str] = Field(..., description='URI of the pulsar server')


class Quotas(BaseModel):
    authorizedCallsPerDay: int = Field(
        ..., description='The number of authorized calls per day', examples=[123]
    )
    authorizedCallsPerMonth: int = Field(
        ..., description='The number of authorized calls per month', examples=[123]
    )
    authorizedCallsPerSec: int = Field(
        ..., description='The number of authorized calls per second', examples=[123]
    )
    currentCallsPerDay: int = Field(
        ..., description='The current number of calls per day', examples=[123]
    )
    currentCallsPerMonth: int = Field(
        ..., description='The current number of calls per month', examples=[123]
    )
    currentCallsPerSec: int = Field(
        ..., description='The current number of calls per second', examples=[123]
    )
    remainingCallsPerDay: int = Field(
        ..., description='The remaining number of calls per day', examples=[123]
    )
    remainingCallsPerMonth: int = Field(
        ..., description='The number of authorized calls per month', examples=[123]
    )
    remainingCallsPerSec: int = Field(
        ..., description='The remaining number of calls per second', examples=[123]
    )


class RSAlgoSettings(BaseModel):
    privateKey: Optional[str] = Field(
        None,
        description='The private key for the RSA function',
        examples=['a string value'],
    )
    publicKey: str = Field(
        ...,
        description='The public key for the RSA function',
        examples=['a string value'],
    )
    size: int = Field(
        ...,
        description='Size for SHA function. can be 256, 384 or 512',
        examples=[123123],
    )
    type: str = Field(
        ..., description='String with value RSAlgoSettings', examples=['a string value']
    )


class RedirectionSettings(BaseModel):
    code: int = Field(..., description='The http redirect code', examples=[123123])
    enabled: bool = Field(
        ..., description='Whether or not redirection is enabled', examples=[True]
    )
    to: str = Field(
        ..., description='The location for redirection', examples=['a string value']
    )


class RefJwtVerifier(BaseModel):
    enabled: bool = Field(..., description='Is it enabled', examples=[True])
    id: str = Field(
        ..., description='The id of the GlobalJWTVerifier', examples=['a string value']
    )
    type: str = Field(
        ..., description="A string with value 'ref'", examples=['a string value']
    )


class Script(BaseModel):
    code: Dict[str, str] = Field(
        ..., description='The code of the script', examples=[{'key': 'value'}]
    )
    desc: Dict[str, str] = Field(
        ..., description='The description of the script', examples=[{'key': 'value'}]
    )
    id: str = Field(
        ..., description='The id of the script', examples=['a string value']
    )
    name: str = Field(
        ..., description='The name of the script', examples=['a string value']
    )


class ScriptCompilationError(BaseModel):
    column: str = Field(
        ..., description='The column of the error', examples=['a string value']
    )
    file: Dict[str, str] = Field(
        ...,
        description='The file where the error is located',
        examples=[{'key': 'value'}],
    )
    line: str = Field(
        ..., description='The line of the error', examples=['a string value']
    )
    message: Dict[str, str] = Field(
        ...,
        description='The message to display for the error',
        examples=[{'key': 'value'}],
    )
    rawMessage: Dict[str, str] = Field(
        ...,
        description='The raw message from the compiler',
        examples=[{'key': 'value'}],
    )


class ScriptCompilationResult(BaseModel):
    done: bool = Field(..., description='Is the task done or not', examples=[True])
    error: Optional[ScriptCompilationError] = None


class Stats(BaseModel):
    calls: int = Field(
        ...,
        description='Number of calls on the specified service or globally',
        examples=[123],
    )
    concurrentHandledRequests: int = Field(
        ..., description='The number of concurrent request currently', examples=[123]
    )
    dataIn: int = Field(
        ...,
        description='The amount of data sent to the specified service or Otoroshi globally',
        examples=[123],
    )
    dataInRate: float = Field(
        ...,
        description='The rate of data sent to the specified service or Otoroshi globally',
        examples=[42.2],
    )
    dataOut: int = Field(
        ...,
        description='The amount of data sent from the specified service or Otoroshi globally',
        examples=[123],
    )
    dataOutRate: float = Field(
        ...,
        description='The rate of data sent from the specified service or Otoroshi globally',
        examples=[42.2],
    )
    duration: float = Field(
        ..., description='The average duration for a call', examples=[42.2]
    )
    overhead: float = Field(
        ...,
        description='The average overhead time induced by Otoroshi for each call',
        examples=[42.2],
    )
    rate: float = Field(
        ...,
        description='The rate of data sent from and to the specified service or Otoroshi globally',
        examples=[42.2],
    )


class StatsdConfig(BaseModel):
    datadog: bool = Field(..., description='Datadog agent', examples=[True])
    host: str = Field(
        ..., description='The host of the StatsD agent', examples=['a string value']
    )
    port: int = Field(
        ..., description='The port of the StatsD agent', examples=[123123]
    )


class Target(BaseModel):
    host: constr(
        pattern=r'^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])$'
    ) = Field(
        ...,
        description='The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port',
        examples=['www.google.com'],
    )
    scheme: str = Field(
        ...,
        description='The protocol used for communication. Can be http or https',
        examples=['a string value'],
    )


class TransformSettings(BaseModel):
    location: Union[InQueryParam, InHeader, InCookie]
    mappingSettings: MappingSettings


class U2FAdmin(BaseModel):
    createdAt: int = Field(
        ..., description='The creation date of the user', examples=[123]
    )
    label: str = Field(
        ..., description='The label for the user', examples=['a string value']
    )
    password: str = Field(
        ..., description='The hashed password of the user', examples=['a string value']
    )
    registration: Dict[str, str] = Field(
        ..., description='The U2F registration slug', examples=[{'key': 'value'}]
    )
    username: str = Field(
        ..., description='The email address of the user', examples=['a string value']
    )


class ValidationAuthority(BaseModel):
    alwaysValid: bool = Field(
        ...,
        description='Bypass http calls, every certificates are valids',
        examples=[True],
    )
    badTtl: int = Field(
        ..., description='The TTL for invalid access response caching', examples=[123]
    )
    description: str = Field(
        ..., description='The description of the settings', examples=['a string value']
    )
    goodTtl: int = Field(
        ..., description='The TTL for valid access response caching', examples=[123]
    )
    headers: Dict[str, str] = Field(
        ..., description='HTTP call headers', examples=[{'key': 'value'}]
    )
    host: str = Field(
        ..., description='The host of the server', examples=['a string value']
    )
    id: str = Field(
        ..., description='The id of the settings', examples=['a string value']
    )
    method: str = Field(..., description='The HTTP method', examples=['a string value'])
    name: str = Field(
        ..., description='The name of the settings', examples=['a string value']
    )
    noCache: bool = Field(..., description='Avoid caching responses', examples=[True])
    path: str = Field(..., description='The URL path', examples=['a string value'])
    timeout: int = Field(..., description='The call timeout', examples=[123])
    url: str = Field(
        ..., description='The URL of the server', examples=['a string value']
    )


class VerificationSettings(BaseModel):
    fields: Dict[str, str] = Field(
        ...,
        description='Fields to verify with their values',
        examples=[{'key': 'value'}],
    )
    mappingSettings: Optional[MappingSettings] = None


class Webhook(BaseModel):
    headers: Dict[str, str] = Field(
        ...,
        description='Headers to authorize the call or whatever',
        examples=[{'key': 'value'}],
    )
    url: AnyUrl = Field(
        ...,
        description='The URL where events are posted',
        examples=['http://www.google.com'],
    )


class WhebhookConfig(BaseModel):
    headers: Optional[Dict[str, str]] = Field(
        None, description='Optional headers', examples=[{'key': 'value'}]
    )
    url: Optional[List[str]] = Field(None, description='URLs of the webhook')


class ApiApikeysGetResponse(RootModel[List[ApiKey]]):
    root: List[ApiKey]


class ApiCertificatesGetResponse(RootModel[List[Certificate]]):
    root: List[Certificate]


class ApiClientValidatorsGetResponse(RootModel[List[ValidationAuthority]]):
    root: List[ValidationAuthority]


class Status(Enum):
    field_200 = '200'


class ApiDataExporterConfigsBulkDeleteResponseItem(BaseModel):
    deleted: Optional[bool] = Field(
        None,
        description='Whether the action was carried out correctly or not',
        examples=[True],
    )
    id: Optional[bool] = Field(None, description='Data exporter id', examples=[True])
    status: Optional[Status] = Field(None, description='Status')


class ApiDataExporterConfigsBulkDeleteResponse(
    RootModel[List[ApiDataExporterConfigsBulkDeleteResponseItem]]
):
    root: List[ApiDataExporterConfigsBulkDeleteResponseItem]


class ApiDataExporterConfigsBulkPatchResponseItem(BaseModel):
    id: Optional[bool] = Field(None, description='Data exporter id', examples=[True])
    status: Optional[Status] = Field(None, description='Status')
    updated: Optional[bool] = Field(
        None,
        description='Whether the action was carried out correctly or not',
        examples=[True],
    )


class ApiDataExporterConfigsBulkPatchResponse(
    RootModel[List[ApiDataExporterConfigsBulkPatchResponseItem]]
):
    root: List[ApiDataExporterConfigsBulkPatchResponseItem]


class Status2(Enum):
    field_201 = '201'


class ApiDataExporterConfigsBulkPostResponseItem(BaseModel):
    created: Optional[bool] = Field(
        None,
        description='Whether the action was carried out correctly or not',
        examples=[True],
    )
    id: Optional[bool] = Field(None, description='Data exporter id', examples=[True])
    status: Optional[Status2] = Field(None, description='Status')


class ApiDataExporterConfigsBulkPostResponse(
    RootModel[List[ApiDataExporterConfigsBulkPostResponseItem]]
):
    root: List[ApiDataExporterConfigsBulkPostResponseItem]


class Status3(Enum):
    field_200 = '200'


class ApiDataExporterConfigsBulkPutResponseItem(BaseModel):
    id: Optional[bool] = Field(None, description='Data exporter id', examples=[True])
    status: Optional[Status3] = Field(None, description='Status')
    updated: Optional[bool] = Field(
        None,
        description='Whether the action was carried out correctly or not',
        examples=[True],
    )


class ApiDataExporterConfigsBulkPutResponse(
    RootModel[List[ApiDataExporterConfigsBulkPutResponseItem]]
):
    root: List[ApiDataExporterConfigsBulkPutResponseItem]


class ApiGroupsGetResponse(RootModel[List[Group]]):
    root: List[Group]


class ApiGroupsGroupIdApikeysGetResponse(RootModel[List[ApiKey]]):
    root: List[ApiKey]


class ApiGroupsServiceGroupIdServicesGetResponse(RootModel[List[ApiKey]]):
    root: List[ApiKey]


class ApiScriptsGetResponse(RootModel[List[Script]]):
    root: List[Script]


class ApiServicesServiceIdApikeysGetResponse(RootModel[List[ApiKey]]):
    root: List[ApiKey]


class ApiServicesServiceIdTargetsDeleteResponse(RootModel[List[Target]]):
    root: List[Target]


class ApiServicesServiceIdTargetsGetResponse(RootModel[List[Target]]):
    root: List[Target]


class ApiServicesServiceIdTargetsPatchResponse(RootModel[List[Target]]):
    root: List[Target]


class ApiServicesServiceIdTargetsPostResponse(RootModel[List[Target]]):
    root: List[Target]


class ApiSnowmonkeyOutagesGetResponse(RootModel[List[Outage]]):
    root: List[Outage]


class Canary(BaseModel):
    enabled: bool = Field(
        ..., description='Use canary mode for this service', examples=[True]
    )
    root: str = Field(
        ...,
        description="Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
        examples=['a string value'],
    )
    targets: List[Target] = Field(
        ...,
        description='The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures',
    )
    traffic: int = Field(
        ...,
        description='Ratio of traffic that will be sent to canary targets.',
        examples=[123123],
    )


class ChaosConfig(BaseModel):
    badResponsesFaultConfig: Optional[BadResponsesFaultConfig] = None
    enabled: bool = Field(
        ..., description='Whether or not this config is enabled', examples=[True]
    )
    largeRequestFaultConfig: Optional[LargeRequestFaultConfig] = None
    largeResponseFaultConfig: Optional[LargeResponseFaultConfig] = None
    latencyInjectionFaultConfig: Optional[LatencyInjectionFaultConfig] = None


class DataExporterConfig(BaseModel):
    bufferSize: Optional[int] = Field(
        None, description='buffer size', examples=[123123]
    )
    config: Optional[
        Union[
            ElasticConfig,
            KafkaConfig,
            PulsarDataExporterConfig,
            FileDataExporterConfig,
            MailerGenericExporterConfig,
            MailerConsoleExporterConfig,
            MailerMailgunExporterConfig,
            MailerMailjetExporterConfig,
            MailerSendgridExporterConfig,
            ConsoleDataExporterConfig,
            CustomDataExporterConfig,
        ]
    ] = Field(None, description='Data Exporter config')
    desc: Optional[str] = Field(
        None, description='Description', examples=['a string value']
    )
    enabled: Optional[str] = Field(
        None, description='Boolean', examples=['a string value']
    )
    filtering: Optional[Filtering] = Field(None, description='filtering')
    groupDuration: Optional[int] = Field(None, description='duration', examples=[123])
    groupSize: Optional[int] = Field(None, description='Group size', examples=[123123])
    id: Optional[str] = Field(None, description='Id', examples=['a string value'])
    jsonWorkers: Optional[int] = Field(
        None, description='nb workers', examples=[123123]
    )
    location: Optional[Location] = Field(None, description='location')
    metadata: Optional[Dict[str, str]] = Field(
        None, description='Metadata', examples=[{'key': 'value'}]
    )
    name: Optional[str] = Field(None, description='Name', examples=['a string value'])
    projection: Optional[Dict[str, str]] = Field(
        None, description='projection', examples=[{'key': 'value'}]
    )
    sendWorkers: Optional[int] = Field(
        None, description='send workers', examples=[123123]
    )
    typ: Optional[Typ] = Field(None, description='Type of data exporter')


class GenericOauth2ModuleConfig(BaseModel):
    accessTokenField: str = Field(
        ..., description='Field name to get access token', examples=['a string value']
    )
    authorizeUrl: str = Field(
        ..., description='OAuth authorize URL', examples=['a string value']
    )
    callbackUrl: str = Field(
        ..., description='Otoroshi callback URL', examples=['a string value']
    )
    claims: Optional[str] = Field(
        None, description='The claims of the token', examples=['a string value']
    )
    clientId: str = Field(
        ..., description='OAuth Client id', examples=['a string value']
    )
    clientSecret: str = Field(
        ..., description='OAuth Client secret', examples=['a string value']
    )
    desc: str = Field(
        ..., description='Description of the config', examples=['a string value']
    )
    emailField: str = Field(
        ...,
        description='Field name to get email from user profile',
        examples=['a string value'],
    )
    id: str = Field(
        ..., description='Unique id of the config', examples=['a string value']
    )
    jwtVerifier: Optional[
        Union[HSAlgoSettings, RSAlgoSettings, ESAlgoSettings, JWKSAlgoSettings]
    ] = Field(None, description='Algo. settings to verify JWT token')
    loginUrl: str = Field(
        ..., description='OAuth login URL', examples=['a string value']
    )
    logoutUrl: str = Field(
        ..., description='OAuth logout URL', examples=['a string value']
    )
    name: str = Field(
        ..., description='Name of the config', examples=['a string value']
    )
    nameField: str = Field(
        ...,
        description='Field name to get name from user profile',
        examples=['a string value'],
    )
    oidConfig: Optional[str] = Field(
        None, description='URL of the OIDC config. file', examples=['a string value']
    )
    otoroshiDataField: str = Field(
        ...,
        description='Field name to get otoroshi metadata from. You can specify sub fields using | as separator',
        examples=['a string value'],
    )
    readProfileFromToken: Optional[bool] = Field(
        None,
        description='The user profile will be read from the JWT token in id_token',
        examples=[True],
    )
    scope: Optional[str] = Field(
        None, description='The scope of the token', examples=['a string value']
    )
    sessionMaxAge: int = Field(
        ..., description='Max age of the session', examples=[123123]
    )
    tokenUrl: str = Field(
        ..., description='OAuth token URL', examples=['a string value']
    )
    type: str = Field(
        ...,
        description='Type of settings. value is oauth2',
        examples=['a string value'],
    )
    useCookies: Optional[bool] = Field(
        None, description='Use for redirection to actual service', examples=[True]
    )
    useJson: Optional[bool] = Field(
        None,
        description='Use JSON or URL Form Encoded as payload with the OAuth provider',
        examples=[True],
    )
    userInfoUrl: str = Field(
        ...,
        description='OAuth userinfo to get user profile',
        examples=['a string value'],
    )


class GlobalConfig(BaseModel):
    alertsEmails: List[EmailStr] = Field(
        ..., description='Email addresses that will receive all Otoroshi alert events'
    )
    alertsWebhooks: List[Webhook] = Field(
        ..., description='Webhook that will receive all Otoroshi alert events'
    )
    analyticsWebhooks: List[Webhook] = Field(
        ..., description='Webhook that will receive all internal Otoroshi events'
    )
    apiReadOnly: bool = Field(
        ...,
        description="If enabled, Admin API won't be able to write/update/delete entities",
        examples=[True],
    )
    autoLinkToDefaultGroup: bool = Field(
        ...,
        description='If not defined, every new service descriptor will be added to the default group',
        examples=[True],
    )
    backofficeAuth0Config: Optional[Auth0Config] = Field(
        None, description='Optional configuration for the backoffice Auth0 domain'
    )
    cleverSettings: Optional[CleverSettings] = Field(
        None, description='Optional CleverCloud configuration'
    )
    elasticReadsConfig: Optional[ElasticConfig] = Field(
        None, description='Config. for elastic reads'
    )
    elasticWritesConfigs: Optional[List[ElasticConfig]] = Field(
        None, description='Configs. for Elastic writes'
    )
    endlessIpAddresses: List[IPv4Address] = Field(
        ...,
        description='IP addresses for which any request to Otoroshi will respond with 128 Gb of zeros',
    )
    ipFiltering: IpFiltering
    limitConcurrentRequests: bool = Field(
        ...,
        description='If enabled, Otoroshi will reject new request if too much at the same time',
        examples=[True],
    )
    lines: Optional[List[str]] = Field(None, description='Possibles lines for Otoroshi')
    mailerSettings: Optional[MailerSettings] = Field(
        None, description='Optional mailer configuration'
    )
    maxConcurrentRequests: int = Field(
        ...,
        description='The number of authorized request processed at the same time',
        examples=[123],
    )
    maxHttp10ResponseSize: Optional[int] = Field(
        None,
        description='The max size in bytes of an HTTP 1.0 response',
        examples=[123],
    )
    maxLogsSize: Optional[int] = Field(
        None, description='Number of events kept locally', examples=[123123]
    )
    middleFingers: Optional[bool] = Field(
        None,
        description='Use middle finger emoji as a response character for endless HTTP responses',
        examples=[True],
    )
    perIpThrottlingQuota: int = Field(
        ...,
        description='Authorized number of calls per second globally per IP address, measured on 10 seconds',
        examples=[123],
    )
    privateAppsAuth0Config: Optional[Auth0Config] = Field(
        None, description='Optional configuration for the private apps Auth0 domain'
    )
    streamEntityOnly: bool = Field(
        ...,
        description="HTTP will be streamed only. Doesn't work with old browsers",
        examples=[True],
    )
    throttlingQuota: int = Field(
        ...,
        description='Authorized number of calls per second globally, measured on 10 seconds',
        examples=[123],
    )
    u2fLoginOnly: bool = Field(
        ...,
        description='If enabled, login to backoffice through Auth0 will be disabled',
        examples=[True],
    )
    useCircuitBreakers: bool = Field(
        ...,
        description='If enabled, services will be authorized to use circuit breakers',
        examples=[True],
    )


class InMemoryAuthModuleConfig(BaseModel):
    desc: str = Field(
        ..., description='Description of the config', examples=['a string value']
    )
    id: str = Field(
        ..., description='Unique id of the config', examples=['a string value']
    )
    name: str = Field(
        ..., description='Name of the config', examples=['a string value']
    )
    sessionMaxAge: str = Field(
        ..., description='Max age of the session', examples=['a string value']
    )
    type: str = Field(
        ..., description='Type of settings. value is basic', examples=['a string value']
    )
    users: List[InMemoryUser] = Field(..., description='List of users')


class PassThrough(BaseModel):
    type: str = Field(
        ..., description='String with value PassThrough', examples=['a string value']
    )
    verificationSettings: VerificationSettings


class Sign(BaseModel):
    algoSettings: Union[
        HSAlgoSettings, RSAlgoSettings, ESAlgoSettings, JWKSAlgoSettings
    ]
    type: str = Field(
        ..., description='String with value Sign', examples=['a string value']
    )
    verificationSettings: VerificationSettings


class SnowMonkeyConfig(BaseModel):
    chaosConfig: ChaosConfig
    dryRun: bool = Field(
        ...,
        description='Whether or not outages will actualy impact requests',
        examples=[True],
    )
    enabled: bool = Field(
        ..., description='Whether or not this config is enabled', examples=[True]
    )
    includeUserFacingDescriptors: bool = Field(
        ...,
        description='Whether or not user facing apps. will be impacted by Snow Monkey',
        examples=[True],
    )
    outageDurationFrom: int = Field(
        ..., description='Start of outage duration range', examples=[123123]
    )
    outageDurationTo: int = Field(
        ..., description='End of outage duration range', examples=[123123]
    )
    outageStrategy: OutageStrategy = Field(..., description='')
    startTime: time = Field(
        ..., description='Start time of Snow Monkey each day', examples=['17:32:28.000']
    )
    stopTime: time = Field(
        ..., description='Stop time of Snow Monkey each day', examples=['17:32:28.000']
    )
    targetGroups: List[str] = Field(
        ...,
        description='Groups impacted by Snow Monkey. If empty, all groups will be impacted',
    )
    timesPerDay: int = Field(
        ...,
        description='Number of time per day each service will be outage',
        examples=[123123],
    )


class Transform(BaseModel):
    algoSettings: Union[
        HSAlgoSettings, RSAlgoSettings, ESAlgoSettings, JWKSAlgoSettings
    ]
    transformSettings: Optional[TransformSettings] = None
    type: str = Field(
        ..., description='String with value Transform', examples=['a string value']
    )
    verificationSettings: VerificationSettings


class ApiAuthsGetResponse(
    RootModel[
        List[
            Union[
                LdapAuthModuleConfig,
                InMemoryAuthModuleConfig,
                GenericOauth2ModuleConfig,
            ]
        ]
    ]
):
    root: List[
        Union[LdapAuthModuleConfig, InMemoryAuthModuleConfig, GenericOauth2ModuleConfig]
    ]


class ApiAuthsPostRequest(
    RootModel[
        Union[LdapAuthModuleConfig, InMemoryAuthModuleConfig, GenericOauth2ModuleConfig]
    ]
):
    root: Union[
        LdapAuthModuleConfig, InMemoryAuthModuleConfig, GenericOauth2ModuleConfig
    ]


class ApiAuthsPostResponse(
    RootModel[
        Union[LdapAuthModuleConfig, InMemoryAuthModuleConfig, GenericOauth2ModuleConfig]
    ]
):
    root: Union[
        LdapAuthModuleConfig, InMemoryAuthModuleConfig, GenericOauth2ModuleConfig
    ]


class ApiAuthsIdGetResponse(
    RootModel[
        Union[LdapAuthModuleConfig, InMemoryAuthModuleConfig, GenericOauth2ModuleConfig]
    ]
):
    root: Union[
        LdapAuthModuleConfig, InMemoryAuthModuleConfig, GenericOauth2ModuleConfig
    ]


class ApiAuthsIdPatchResponse(
    RootModel[
        Union[LdapAuthModuleConfig, InMemoryAuthModuleConfig, GenericOauth2ModuleConfig]
    ]
):
    root: Union[
        LdapAuthModuleConfig, InMemoryAuthModuleConfig, GenericOauth2ModuleConfig
    ]


class ApiAuthsIdPutRequest(
    RootModel[
        Union[LdapAuthModuleConfig, InMemoryAuthModuleConfig, GenericOauth2ModuleConfig]
    ]
):
    root: Union[
        LdapAuthModuleConfig, InMemoryAuthModuleConfig, GenericOauth2ModuleConfig
    ]


class ApiAuthsIdPutResponse(
    RootModel[
        Union[LdapAuthModuleConfig, InMemoryAuthModuleConfig, GenericOauth2ModuleConfig]
    ]
):
    root: Union[
        LdapAuthModuleConfig, InMemoryAuthModuleConfig, GenericOauth2ModuleConfig
    ]


class ApiDataExporterConfigsGetResponse(RootModel[List[DataExporterConfig]]):
    root: List[DataExporterConfig]


class GlobalJwtVerifier(BaseModel):
    algoSettings: Union[
        HSAlgoSettings, RSAlgoSettings, ESAlgoSettings, JWKSAlgoSettings
    ]
    desc: str = Field(
        ..., description='Verifier description', examples=['a string value']
    )
    enabled: bool = Field(..., description='Is it enabled', examples=[True])
    id: str = Field(..., description='Verifier id', examples=['a string value'])
    name: str = Field(..., description='Verifier name', examples=['a string value'])
    source: Union[InQueryParam, InHeader, InCookie]
    strategy: Union[PassThrough, Sign, Transform]
    strict: bool = Field(
        ..., description='Does it fail if JWT not found', examples=[True]
    )


class LocalJwtVerifier(BaseModel):
    algoSettings: Union[
        HSAlgoSettings, RSAlgoSettings, ESAlgoSettings, JWKSAlgoSettings
    ]
    enabled: bool = Field(..., description='Is it enabled', examples=[True])
    source: Union[InQueryParam, InHeader, InCookie]
    strategy: Union[PassThrough, Sign, Transform]
    strict: bool = Field(
        ..., description='Does it fail if JWT not found', examples=[True]
    )
    type: str = Field(
        ..., description="A string with value 'local'", examples=['a string value']
    )


class Service(BaseModel):
    Canary_1: Optional[Canary] = Field(None, alias='Canary')
    additionalHeaders: Optional[Dict[str, str]] = Field(
        None,
        description='Specify headers that will be added to each client request. Useful to add authentication',
        examples=[{'key': 'value'}],
    )
    api: Optional[ExposedApi] = None
    authConfigRef: Optional[str] = Field(
        None,
        description='A reference to a global auth module config',
        examples=['a string value'],
    )
    buildMode: bool = Field(
        ...,
        description='Display a construction page when a user try to use the service',
        examples=[True],
    )
    chaosConfig: Optional[ChaosConfig] = None
    clientConfig: Optional[ClientConfig] = None
    clientValidatorRef: Optional[str] = Field(
        None,
        description='A reference to validation authority',
        examples=['a string value'],
    )
    cors: Optional[CorsSettings] = None
    domain: str = Field(
        ...,
        description='The domain on which the service is available.',
        examples=['a string value'],
    )
    enabled: bool = Field(
        ...,
        description='Activate or deactivate your service. Once disabled, users will get an error page saying the service does not exist',
        examples=[True],
    )
    enforceSecureCommunication: bool = Field(
        ...,
        description='When enabled, Otoroshi will try to exchange headers with downstream service to ensure no one else can use the service from outside',
        examples=[True],
    )
    env: str = Field(
        ...,
        description="The line on which the service is available. Based on that value, the name of the line will be appended to the subdomain. For line prod, nothing will be appended. For example, if the subdomain is 'foo' and line is 'preprod', then the exposed service will be available at 'foo.preprod.mydomain'",
        examples=['a string value'],
    )
    forceHttps: bool = Field(
        ...,
        description='Will force redirection to https:// if not present',
        examples=[True],
    )
    groups: List[str] = Field(
        ...,
        description='Each service descriptor is attached to groups. A group can have one or more services. Each API key is linked to a group and allow access to every service in the group',
        examples=[['a string value']],
    )
    gzip: Optional[Gzip] = None
    headersVerification: Optional[Dict[str, str]] = Field(
        None,
        description='Specify headers that will be verified after routing.',
        examples=[{'key': 'value'}],
    )
    healthCheck: Optional[HealthCheck] = None
    id: UUID = Field(
        ...,
        description='A unique random string to identify your service',
        examples=['110e8400-e29b-11d4-a716-446655440000'],
    )
    ipFiltering: Optional[IpFiltering] = None
    jwtVerifier: Optional[Union[LocalJwtVerifier, RefJwtVerifier]] = None
    localHost: Optional[str] = Field(
        None,
        description='The host used localy, mainly localhost:xxxx',
        examples=['a string value'],
    )
    localScheme: Optional[str] = Field(
        None,
        description='The scheme used localy, mainly http',
        examples=['a string value'],
    )
    maintenanceMode: bool = Field(
        ...,
        description='Display a maintainance page when a user try to use the service',
        examples=[True],
    )
    matchingHeaders: Optional[Dict[str, str]] = Field(
        None,
        description='Specify headers that MUST be present on client request to route it. Useful to implement versioning',
        examples=[{'key': 'value'}],
    )
    matchingRoot: Optional[str] = Field(
        None,
        description='The root path on which the service is available',
        examples=['a string value'],
    )
    metadata: Optional[Dict[str, str]] = Field(
        None,
        description='Just a bunch of random properties',
        examples=[{'key': 'value'}],
    )
    name: str = Field(
        ...,
        description='The name of your service. Only for debug and human readability purposes',
        examples=['a string value'],
    )
    overrideHost: Optional[bool] = Field(
        None,
        description='Host header will be overriden with Host of the target',
        examples=[True],
    )
    privateApp: bool = Field(
        ...,
        description='When enabled, user will be allowed to use the service (UI) only if they are registered users of the private apps domain',
        examples=[True],
    )
    privatePatterns: Optional[List[str]] = Field(
        None,
        description='If you define a public pattern that is a little bit too much, you can make some of public URL private again',
    )
    publicPatterns: Optional[List[str]] = Field(
        None,
        description="By default, every services are private only and you'll need an API key to access it. However, if you want to expose a public UI, you can define one or more public patterns (regex) to allow access to anybody. For example if you want to allow anybody on any URL, just use '/.*'",
    )
    redirectToLocal: Optional[bool] = Field(
        None,
        description='If you work locally with Otoroshi, you may want to use that feature to redirect one particuliar service to a local host. For example, you can relocate https://foo.preprod.bar.com to http://localhost:8080 to make some tests',
        examples=[True],
    )
    redirection: Optional[RedirectionSettings] = None
    root: str = Field(
        ...,
        description="Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
        examples=['a string value'],
    )
    secComExcludedPatterns: Optional[List[str]] = Field(
        None, description='URI patterns excluded from secured communications'
    )
    secComSettings: Optional[
        Union[HSAlgoSettings, RSAlgoSettings, ESAlgoSettings, JWKSAlgoSettings]
    ] = None
    sendOtoroshiHeadersBack: Optional[bool] = Field(
        None,
        description='When enabled, Otoroshi will send headers to consumer like request id, client latency, overhead, etc ...',
        examples=[True],
    )
    statsdConfig: Optional[StatsdConfig] = None
    subdomain: str = Field(
        ...,
        description='The subdomain on which the service is available',
        examples=['a string value'],
    )
    targets: List[Target] = Field(
        ...,
        description='The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures',
    )
    transformerRef: Optional[str] = Field(
        None,
        description='A reference to a request transformer',
        examples=['a string value'],
    )
    userFacing: Optional[bool] = Field(
        None,
        description='The fact that this service will be seen by users and cannot be impacted by the Snow Monkey',
        examples=[True],
    )
    xForwardedHeaders: Optional[bool] = Field(
        None, description='Send X-Forwarded-* headers', examples=[True]
    )


class ApiServicesGetResponse(RootModel[List[Service]]):
    root: List[Service]


class ApiVerifiersGetResponse(RootModel[List[GlobalJwtVerifier]]):
    root: List[GlobalJwtVerifier]


class LinesLineServicesGetResponse(RootModel[List[Service]]):
    root: List[Service]


class ServiceDescriptor(BaseModel):
    Canary_1: Optional[Canary] = Field(None, alias='Canary')
    additionalHeaders: Optional[Dict[str, str]] = Field(
        None,
        description='Specify headers that will be added to each client request. Useful to add authentication',
        examples=[{'key': 'value'}],
    )
    api: Optional[ExposedApi] = None
    authConfigRef: Optional[str] = Field(
        None,
        description='A reference to a global auth module config',
        examples=['a string value'],
    )
    buildMode: bool = Field(
        ...,
        description='Display a construction page when a user try to use the service',
        examples=[True],
    )
    chaosConfig: Optional[ChaosConfig] = None
    clientConfig: Optional[ClientConfig] = None
    clientValidatorRef: Optional[str] = Field(
        None,
        description='A reference to validation authority',
        examples=['a string value'],
    )
    cors: Optional[CorsSettings] = None
    domain: str = Field(
        ...,
        description='The domain on which the service is available.',
        examples=['a string value'],
    )
    enabled: bool = Field(
        ...,
        description='Activate or deactivate your service. Once disabled, users will get an error page saying the service does not exist',
        examples=[True],
    )
    enforceSecureCommunication: bool = Field(
        ...,
        description='When enabled, Otoroshi will try to exchange headers with downstream service to ensure no one else can use the service from outside',
        examples=[True],
    )
    env: str = Field(
        ...,
        description="The line on which the service is available. Based on that value, the name of the line will be appended to the subdomain. For line prod, nothing will be appended. For example, if the subdomain is 'foo' and line is 'preprod', then the exposed service will be available at 'foo.preprod.mydomain'",
        examples=['a string value'],
    )
    forceHttps: bool = Field(
        ...,
        description='Will force redirection to https:// if not present',
        examples=[True],
    )
    groups: List[str] = Field(
        ...,
        description='Each service descriptor is attached to groups. A group can have one or more services. Each API key is linked to a group and allow access to every service in the group',
        examples=[['a string value']],
    )
    gzip: Optional[Gzip] = None
    headersVerification: Optional[Dict[str, str]] = Field(
        None,
        description='Specify headers that will be verified after routing.',
        examples=[{'key': 'value'}],
    )
    healthCheck: Optional[HealthCheck] = None
    id: UUID = Field(
        ...,
        description='A unique random string to identify your service',
        examples=['110e8400-e29b-11d4-a716-446655440000'],
    )
    ipFiltering: Optional[IpFiltering] = None
    jwtVerifier: Optional[Union[LocalJwtVerifier, RefJwtVerifier]] = None
    localHost: Optional[str] = Field(
        None,
        description='The host used localy, mainly localhost:xxxx',
        examples=['a string value'],
    )
    localScheme: Optional[str] = Field(
        None,
        description='The scheme used localy, mainly http',
        examples=['a string value'],
    )
    maintenanceMode: bool = Field(
        ...,
        description='Display a maintainance page when a user try to use the service',
        examples=[True],
    )
    matchingHeaders: Optional[Dict[str, str]] = Field(
        None,
        description='Specify headers that MUST be present on client request to route it. Useful to implement versioning',
        examples=[{'key': 'value'}],
    )
    matchingRoot: Optional[str] = Field(
        None,
        description='The root path on which the service is available',
        examples=['a string value'],
    )
    metadata: Optional[Dict[str, str]] = Field(
        None,
        description='Just a bunch of random properties',
        examples=[{'key': 'value'}],
    )
    name: str = Field(
        ...,
        description='The name of your service. Only for debug and human readability purposes',
        examples=['a string value'],
    )
    overrideHost: Optional[bool] = Field(
        None,
        description='Host header will be overriden with Host of the target',
        examples=[True],
    )
    privateApp: bool = Field(
        ...,
        description='When enabled, user will be allowed to use the service (UI) only if they are registered users of the private apps domain',
        examples=[True],
    )
    privatePatterns: Optional[List[str]] = Field(
        None,
        description='If you define a public pattern that is a little bit too much, you can make some of public URL private again',
    )
    publicPatterns: Optional[List[str]] = Field(
        None,
        description="By default, every services are private only and you'll need an API key to access it. However, if you want to expose a public UI, you can define one or more public patterns (regex) to allow access to anybody. For example if you want to allow anybody on any URL, just use '/.*'",
    )
    redirectToLocal: Optional[bool] = Field(
        None,
        description='If you work locally with Otoroshi, you may want to use that feature to redirect one particuliar service to a local host. For example, you can relocate https://foo.preprod.bar.com to http://localhost:8080 to make some tests',
        examples=[True],
    )
    redirection: Optional[RedirectionSettings] = None
    root: str = Field(
        ...,
        description="Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
        examples=['a string value'],
    )
    secComExcludedPatterns: Optional[List[str]] = Field(
        None, description='URI patterns excluded from secured communications'
    )
    secComSettings: Optional[
        Union[HSAlgoSettings, RSAlgoSettings, ESAlgoSettings, JWKSAlgoSettings]
    ] = None
    sendOtoroshiHeadersBack: Optional[bool] = Field(
        None,
        description='When enabled, Otoroshi will send headers to consumer like request id, client latency, overhead, etc ...',
        examples=[True],
    )
    statsdConfig: Optional[StatsdConfig] = None
    subdomain: str = Field(
        ...,
        description='The subdomain on which the service is available',
        examples=['a string value'],
    )
    targets: List[Target] = Field(
        ...,
        description='The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures',
    )
    transformerRef: Optional[str] = Field(
        None,
        description='A reference to a request transformer',
        examples=['a string value'],
    )
    userFacing: Optional[bool] = Field(
        None,
        description='The fact that this service will be seen by users and cannot be impacted by the Snow Monkey',
        examples=[True],
    )
    xForwardedHeaders: Optional[bool] = Field(
        None, description='Send X-Forwarded-* headers', examples=[True]
    )


class ImportExport(BaseModel):
    admins: List[Admin] = Field(
        ..., description='Current U2F admin at the time of export'
    )
    apiKeys: List[ApiKey] = Field(
        ..., description='Current apik keys at the time of export'
    )
    appConfig: Optional[Dict[str, str]] = Field(
        None,
        description='Current env variables at the time of export',
        examples=[{'key': 'value'}],
    )
    config: GlobalConfig = Field(
        ..., description='Current global config at the time of export'
    )
    date: datetime = Field(..., examples=['2017-07-21T17:32:28Z'])
    dateRaw: int = Field(..., examples=[123])
    errorTemplates: List[ErrorTemplate] = Field(
        ..., description='Current error templates at the time of export'
    )
    label: str = Field(..., examples=['a string value'])
    serviceDescriptors: List[ServiceDescriptor] = Field(
        ..., description='Current service descriptors at the time of export'
    )
    serviceGroups: List[ServiceGroup] = Field(
        ..., description='Current service groups at the time of export'
    )
    simpleAdmins: List[SimpleAdmin] = Field(
        ..., description='Current simple admins at the time of export'
    )
    stats: ImportExportStats = Field(
        ..., description='Current global stats at the time of export'
    )
