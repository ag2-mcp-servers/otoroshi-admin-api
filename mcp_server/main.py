# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T04:50:16+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, HTTPBasic
from fastapi import Path

from models import (
    ApiApikeysGetResponse,
    ApiAuthsGetResponse,
    ApiAuthsIdGetResponse,
    ApiAuthsIdPatchResponse,
    ApiAuthsIdPutRequest,
    ApiAuthsIdPutResponse,
    ApiAuthsPostRequest,
    ApiAuthsPostResponse,
    ApiCertificatesGetResponse,
    ApiClientValidatorsGetResponse,
    ApiDataExporterConfigsBulkDeleteResponse,
    ApiDataExporterConfigsBulkPatchResponse,
    ApiDataExporterConfigsBulkPostResponse,
    ApiDataExporterConfigsBulkPutResponse,
    ApiDataExporterConfigsGetResponse,
    ApiGroupsGetResponse,
    ApiGroupsGroupIdApikeysGetResponse,
    ApiGroupsServiceGroupIdServicesGetResponse,
    ApiKey,
    ApiScriptsGetResponse,
    ApiServicesGetResponse,
    ApiServicesServiceIdApikeysGetResponse,
    ApiServicesServiceIdTargetsDeleteResponse,
    ApiServicesServiceIdTargetsGetResponse,
    ApiServicesServiceIdTargetsPatchResponse,
    ApiServicesServiceIdTargetsPostResponse,
    ApiSnowmonkeyOutagesGetResponse,
    ApiVerifiersGetResponse,
    Certificate,
    DataExporterConfig,
    Deleted,
    Done,
    Environment,
    ErrorTemplate,
    GlobalConfig,
    GlobalJwtVerifier,
    Group,
    ImportExport,
    LinesLineServicesGetResponse,
    OtoroshiHealth,
    Patch,
    Quotas,
    Script,
    ScriptCompilationResult,
    Service,
    SnowMonkeyConfig,
    Stats,
    Target,
    ValidationAuthority,
)

app = MCPProxy(
    contact={'email': 'oss@maif.fr', 'name': 'Otoroshi Team'},
    description='Admin API of the Otoroshi reverse proxy',
    license={
        'name': 'Apache 2.0',
        'url': 'http://www.apache.org/licenses/LICENSE-2.0.html',
    },
    title='Otoroshi Admin API',
    version='1.5.0-dev',
    servers=[{'url': 'http://otoroshi-api.oto.tools/'}, {'url': 'http://maif.local'}],
)


@app.get(
    '/api/apikeys',
    description=""" Get all api keys """,
    tags=['api_key_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def all_api_keys():
    """
    Get all api keys
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/auths',
    description=""" Get all global auth. module configs """,
    tags=['global_auth_management', 'global_configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def find_all_global_auth_modules():
    """
    Get all global auth. module configs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/auths',
    description=""" Create one global auth. module config """,
    tags=['global_auth_management', 'global_configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_global_auth_module(body: ApiAuthsPostRequest = None):
    """
    Create one global auth. module config
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/auths/{id}',
    description=""" Delete one global auth. module config """,
    tags=['global_auth_management', 'global_configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_global_auth_module(id: str):
    """
    Delete one global auth. module config
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/auths/{id}',
    description=""" Get one global auth. module configs """,
    tags=['global_auth_management', 'global_configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def find_global_auth_module_by_id(id: str):
    """
    Get one global auth. module configs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/auths/{id}',
    description=""" Update one global auth. module config """,
    tags=['global_auth_management', 'global_configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def patch_global_auth_module(id: str, body: Patch = None):
    """
    Update one global auth. module config
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/auths/{id}',
    description=""" Update one global auth. module config """,
    tags=['global_auth_management', 'global_configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_global_auth_module(id: str, body: ApiAuthsIdPutRequest = None):
    """
    Update one global auth. module config
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/certificates',
    description=""" Get all certificates """,
    tags=['certificate_handling'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def all_certs():
    """
    Get all certificates
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/certificates',
    description=""" Create one certificate """,
    tags=['certificate_handling'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_cert(body: Certificate = None):
    """
    Create one certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/certificates/{id}',
    description=""" Delete one certificate by id """,
    tags=['certificate_handling'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_cert(id: str):
    """
    Delete one certificate by id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/certificates/{id}',
    description=""" Get one certificate by id """,
    tags=['certificate_handling'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def one_cert(id: str):
    """
    Get one certificate by id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/certificates/{id}',
    description=""" Update one certificate by id """,
    tags=['certificate_handling', 'global_auth_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def patch_cert(id: str, body: Patch = None):
    """
    Update one certificate by id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/certificates/{id}',
    description=""" Update one certificate by id """,
    tags=['certificate_handling'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def put_cert(id: str, body: Certificate = None):
    """
    Update one certificate by id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/client-validators',
    description=""" Get all validation authoritiess """,
    tags=['client_validation_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def find_all_client_validators():
    """
    Get all validation authoritiess
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/client-validators',
    description=""" Create one validation authorities """,
    tags=['client_validation_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_client_validator(body: ValidationAuthority = None):
    """
    Create one validation authorities
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/client-validators/{id}',
    description=""" Delete one validation authorities by id """,
    tags=['client_validation_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_client_validator(id: str):
    """
    Delete one validation authorities by id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/client-validators/{id}',
    description=""" Get one validation authorities by id """,
    tags=['client_validation_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def find_client_validator_by_id(id: str):
    """
    Get one validation authorities by id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/client-validators/{id}',
    description=""" Update one validation authorities by id """,
    tags=['client_validation_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def patch_client_validator(id: str, body: Patch = None):
    """
    Update one validation authorities by id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/client-validators/{id}',
    description=""" Update one validation authorities by id """,
    tags=['client_validation_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_client_validator(id: str, body: ValidationAuthority = None):
    """
    Update one validation authorities by id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/data-exporter-configs',
    description=""" Get all data exporter configs """,
    tags=['data_exporter_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def find_all_data_exporters():
    """
    Get all data exporter configs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/data-exporter-configs',
    description=""" Create a new data exporter config """,
    tags=['data_exporter_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_data_exporter_config(body: DataExporterConfig = None):
    """
    Create a new data exporter config
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/data-exporter-configs/_bulk',
    description=""" Delete a data exporter config """,
    tags=['data_exporter_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def deletebulk_data_exporter_config(body: Patch = None):
    """
    Delete a data exporter config
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/data-exporter-configs/_bulk',
    description=""" Update a data exporter configs with a diff """,
    tags=['data_exporter_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def patch_bulk_data_exporter_config(body: Patch = None):
    """
    Update a data exporter configs with a diff
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/data-exporter-configs/_bulk',
    description=""" Create a new data exporter configs """,
    tags=['data_exporter_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_bulk_data_exporter_configs(body: DataExporterConfig = None):
    """
    Create a new data exporter configs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/data-exporter-configs/_bulk',
    description=""" Update a data exporter configs """,
    tags=['data_exporter_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_bulk_data_exporter_config(body: DataExporterConfig = None):
    """
    Update a data exporter configs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/data-exporter-configs/_template',
    description=""" Get all data exporter configs """,
    tags=['data_exporter_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def data_exporter_template(type: Optional[str] = None):
    """
    Get all data exporter configs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/data-exporter-configs/{dataExporterConfigId}',
    description=""" Delete a data exporter config """,
    tags=['data_exporter_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_data_exporter_config(
    data_exporter_config_id: str = Path(..., alias='dataExporterConfigId')
):
    """
    Delete a data exporter config
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/data-exporter-configs/{dataExporterConfigId}',
    description=""" Get a data exporter config """,
    tags=['data_exporter_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def find_data_exporter_config_by_id(
    data_exporter_config_id: str = Path(..., alias='dataExporterConfigId')
):
    """
    Get a data exporter config
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/data-exporter-configs/{dataExporterConfigId}',
    description=""" Update a data exporter config with a diff """,
    tags=['data_exporter_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def patch_data_exporter_config(
    data_exporter_config_id: str = Path(..., alias='dataExporterConfigId'),
    body: Patch = None,
):
    """
    Update a data exporter config with a diff
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/data-exporter-configs/{dataExporterConfigId}',
    description=""" Update a data exporter config """,
    tags=['data_exporter_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_data_exporter_config(
    data_exporter_config_id: str = Path(..., alias='dataExporterConfigId'),
    body: DataExporterConfig = None,
):
    """
    Update a data exporter config
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/globalconfig',
    description=""" Get the full configuration of Otoroshi """,
    tags=['global_configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def global_config():
    """
    Get the full configuration of Otoroshi
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/globalconfig',
    description=""" Update the global configuration with a diff """,
    tags=['global_configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def patch_global_config(body: Patch = None):
    """
    Update the global configuration with a diff
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/globalconfig',
    description=""" Update the global configuration """,
    tags=['global_configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def put_global_config(body: GlobalConfig = None):
    """
    Update the global configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/groups',
    description=""" Get all service groups """,
    tags=['service_group_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def all_service_groups():
    """
    Get all service groups
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/groups',
    description=""" Create a new service group """,
    tags=['service_group_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_group(body: Group = None):
    """
    Create a new service group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/groups/{groupId}/apikeys',
    description=""" Get all api keys for the group of a service """,
    tags=['api_key_operations', 'service_group_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def api_keys_from_group(group_id: str = Path(..., alias='groupId')):
    """
    Get all api keys for the group of a service
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/groups/{groupId}/apikeys',
    description=""" Create a new api key for a group """,
    tags=['api_key_operations', 'service_group_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_api_key_from_group(
    group_id: str = Path(..., alias='groupId'), body: ApiKey = None
):
    """
    Create a new api key for a group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/groups/{groupId}/apikeys/{clientId}',
    description=""" Delete an api key for a specified service group """,
    tags=['api_key_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_api_key_from_group(
    group_id: str = Path(..., alias='groupId'),
    client_id: str = Path(..., alias='clientId'),
):
    """
    Delete an api key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/groups/{groupId}/apikeys/{clientId}',
    description=""" Get an api key for a specified service group """,
    tags=['api_key_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def api_key_from_group(
    group_id: str = Path(..., alias='groupId'),
    client_id: str = Path(..., alias='clientId'),
):
    """
    Get an api key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/groups/{groupId}/apikeys/{clientId}',
    description=""" Update an api key for a specified service descriptor with a diff """,
    tags=['api_key_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def patch_api_key_from_group(
    group_id: str = Path(..., alias='groupId'),
    client_id: str = Path(..., alias='clientId'),
    body: Patch = None,
):
    """
    Update an api key with a diff
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/groups/{groupId}/apikeys/{clientId}',
    description=""" Update an api key for a specified service group """,
    tags=['api_key_operations', 'global_auth_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_api_key_from_group(
    group_id: str = Path(..., alias='groupId'),
    client_id: str = Path(..., alias='clientId'),
    body: ApiKey = None,
):
    """
    Update an api key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/groups/{groupId}/apikeys/{clientId}/quotas',
    description=""" Reset the quota state of an api key """,
    tags=['api_key_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def reset_api_key_from_group_quotas(
    group_id: str = Path(..., alias='groupId'),
    client_id: str = Path(..., alias='clientId'),
):
    """
    Reset the quota state of an api key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/groups/{groupId}/apikeys/{clientId}/quotas',
    description=""" Get the quota state of an api key """,
    tags=['api_key_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def api_key_from_group_quotas(
    group_id: str = Path(..., alias='groupId'),
    client_id: str = Path(..., alias='clientId'),
):
    """
    Get the quota state of an api key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/groups/{serviceGroupId}',
    description=""" Delete a service group """,
    tags=['service_group_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_group(service_group_id: str = Path(..., alias='serviceGroupId')):
    """
    Delete a service group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/groups/{serviceGroupId}',
    description=""" Get a service group """,
    tags=['service_group_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def service_group(service_group_id: str = Path(..., alias='serviceGroupId')):
    """
    Get a service group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/groups/{serviceGroupId}',
    description=""" Update a service group with a diff """,
    tags=['service_group_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def patch_group(
    service_group_id: str = Path(..., alias='serviceGroupId'), body: Patch = None
):
    """
    Update a service group with a diff
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/groups/{serviceGroupId}',
    description=""" Update a service group """,
    tags=['service_group_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_group(
    service_group_id: str = Path(..., alias='serviceGroupId'), body: Group = None
):
    """
    Update a service group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/groups/{serviceGroupId}/services',
    description=""" Get all services descriptor for a group """,
    tags=['service_group_operations', 'service_descriptor_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def service_group_services(service_group_id: str = Path(..., alias='serviceGroupId')):
    """
    Get all services descriptor for a group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/import',
    description=""" Import the full state of Otoroshi as a file """,
    tags=['data_import_export_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def full_import_from_file(body: ImportExport = None):
    """
    Import the full state of Otoroshi as a file
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/live',
    description=""" Get global otoroshi stats """,
    tags=['live_statistics_monitoring', 'global_configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def global_live_stats():
    """
    Get global otoroshi stats
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/live/{id}',
    description=""" Get live feed of global otoroshi stats (global) or for a service {id} """,
    tags=['live_statistics_monitoring'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def service_live_stats(id: str):
    """
    Get live feed of otoroshi stats
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/otoroshi.json',
    description=""" Export the full state of Otoroshi """,
    tags=['data_import_export_operations', 'global_configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def full_export():
    """
    Export the full state of Otoroshi
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/otoroshi.json',
    description=""" Import the full state of Otoroshi """,
    tags=['data_import_export_operations', 'global_configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def full_import(body: ImportExport = None):
    """
    Import the full state of Otoroshi
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/scripts',
    description=""" Get all scripts """,
    tags=['script_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def find_all_scripts():
    """
    Get all scripts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/scripts',
    description=""" Create a new script """,
    tags=['script_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_script(body: Script = None):
    """
    Create a new script
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/scripts/_compile',
    description=""" Compile a script """,
    tags=['script_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def compile_script(body: Script = None):
    """
    Compile a script
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/scripts/{scriptId}',
    description=""" Delete a script """,
    tags=['script_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_script(script_id: str = Path(..., alias='scriptId')):
    """
    Delete a script
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/scripts/{scriptId}',
    description=""" Get a script """,
    tags=['script_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def find_script_by_id(script_id: str = Path(..., alias='scriptId')):
    """
    Get a script
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/scripts/{scriptId}',
    description=""" Update a script with a diff """,
    tags=['script_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def patch_script(script_id: str = Path(..., alias='scriptId'), body: Patch = None):
    """
    Update a script with a diff
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/scripts/{scriptId}',
    description=""" Update a script """,
    tags=['script_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_script(script_id: str = Path(..., alias='scriptId'), body: Script = None):
    """
    Update a script
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/services',
    description=""" Get all services """,
    tags=[
        'service_group_operations',
        'global_configuration_management',
        'service_descriptor_management',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def all_services():
    """
    Get all services
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/services',
    description=""" Create a new service descriptor """,
    tags=['service_descriptor_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_service(body: Service = None):
    """
    Create a new service descriptor
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/services/{serviceId}',
    description=""" Delete a service descriptor """,
    tags=['service_descriptor_management', 'service_group_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_service(service_id: str = Path(..., alias='serviceId')):
    """
    Delete a service descriptor
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/services/{serviceId}',
    description=""" Get a service descriptor """,
    tags=['service_descriptor_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def service(service_id: str = Path(..., alias='serviceId')):
    """
    Get a service descriptor
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/services/{serviceId}',
    description=""" Update a service descriptor with a diff """,
    tags=['service_descriptor_management', 'service_group_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def patch_service(service_id: str = Path(..., alias='serviceId'), body: Patch = None):
    """
    Update a service descriptor with a diff
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/services/{serviceId}',
    description=""" Update a service descriptor """,
    tags=['service_descriptor_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_service(
    service_id: str = Path(..., alias='serviceId'), body: Service = None
):
    """
    Update a service descriptor
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/services/{serviceId}/apikeys',
    description=""" Get all api keys for the group of a service """,
    tags=['api_key_operations', 'service_group_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def api_keys(service_id: str = Path(..., alias='serviceId')):
    """
    Get all api keys for the group of a service
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/services/{serviceId}/apikeys',
    tags=['api_key_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_api_key(service_id: str = Path(..., alias='serviceId'), body: ApiKey = None):
    """
    Create a new api key for a service
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/services/{serviceId}/apikeys/{clientId}',
    description=""" Delete an api key for a specified service descriptor """,
    tags=['api_key_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_api_key(
    service_id: str = Path(..., alias='serviceId'),
    client_id: str = Path(..., alias='clientId'),
):
    """
    Delete an api key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/services/{serviceId}/apikeys/{clientId}',
    description=""" Get an api key for a specified service descriptor """,
    tags=['api_key_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def api_key(
    service_id: str = Path(..., alias='serviceId'),
    client_id: str = Path(..., alias='clientId'),
):
    """
    Get an api key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/services/{serviceId}/apikeys/{clientId}',
    description=""" Update an api key for a specified service descriptor with a diff """,
    tags=['api_key_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def patch_api_key(
    service_id: str = Path(..., alias='serviceId'),
    client_id: str = Path(..., alias='clientId'),
    body: Patch = None,
):
    """
    Update an api key with a diff
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/services/{serviceId}/apikeys/{clientId}',
    description=""" Update an api key for a specified service descriptor """,
    tags=['api_key_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_api_key(
    service_id: str = Path(..., alias='serviceId'),
    client_id: str = Path(..., alias='clientId'),
    body: ApiKey = None,
):
    """
    Update an api key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/services/{serviceId}/apikeys/{clientId}/group',
    description=""" Get the group of an api key """,
    tags=['api_key_operations', 'client_validation_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def api_key_group(
    service_id: str = Path(..., alias='serviceId'),
    client_id: str = Path(..., alias='clientId'),
):
    """
    Get the group of an api key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/services/{serviceId}/apikeys/{clientId}/quotas',
    description=""" Reset the quota state of an api key """,
    tags=['api_key_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def reset_api_key_quotas(
    service_id: str = Path(..., alias='serviceId'),
    client_id: str = Path(..., alias='clientId'),
):
    """
    Reset the quota state of an api key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/services/{serviceId}/apikeys/{clientId}/quotas',
    description=""" Get the quota state of an api key """,
    tags=['api_key_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def api_key_quotas(
    service_id: str = Path(..., alias='serviceId'),
    client_id: str = Path(..., alias='clientId'),
):
    """
    Get the quota state of an api key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/services/{serviceId}/targets',
    description=""" Delete a service descriptor target """,
    tags=['service_descriptor_management', 'service_group_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def service_delete_target(service_id: str = Path(..., alias='serviceId')):
    """
    Delete a service descriptor target
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/services/{serviceId}/targets',
    description=""" Get a service descriptor targets """,
    tags=['service_descriptor_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def service_targets(service_id: str = Path(..., alias='serviceId')):
    """
    Get a service descriptor targets
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/services/{serviceId}/targets',
    description=""" Update a service descriptor targets """,
    tags=['service_descriptor_management', 'service_group_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_service_targets(
    service_id: str = Path(..., alias='serviceId'), body: Patch = None
):
    """
    Update a service descriptor targets
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/services/{serviceId}/targets',
    description=""" Add a target to a service descriptor """,
    tags=['service_descriptor_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def service_add_target(
    service_id: str = Path(..., alias='serviceId'), body: Target = None
):
    """
    Add a target to a service descriptor
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/services/{serviceId}/template',
    description=""" Delete a service descriptor error template """,
    tags=['service_template_handling', 'service_descriptor_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_service_template(service_id: str = Path(..., alias='serviceId')):
    """
    Delete a service descriptor error template
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/services/{serviceId}/template',
    description=""" Get a service descriptor error template """,
    tags=['service_descriptor_management', 'service_template_handling'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def service_template(service_id: str = Path(..., alias='serviceId')):
    """
    Get a service descriptor error template
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/services/{serviceId}/template',
    description=""" Update a service descriptor targets """,
    tags=['service_descriptor_management', 'service_template_handling'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_service_template(
    service_id: str = Path(..., alias='serviceId'), body: ErrorTemplate = None
):
    """
    Create a service descriptor error template
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/services/{serviceId}/template',
    description=""" Update an error template to a service descriptor """,
    tags=['service_descriptor_management', 'service_template_handling'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_service_template(
    service_id: str = Path(..., alias='serviceId'), body: ErrorTemplate = None
):
    """
    Update an error template to a service descriptor
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/snowmonkey/_start',
    description=""" Start the Snow Monkey """,
    tags=['snow_monkey_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def start_snow_monkey():
    """
    Start the Snow Monkey
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/snowmonkey/_stop',
    description=""" Stop the Snow Monkey """,
    tags=['snow_monkey_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def stop_snow_monkey():
    """
    Stop the Snow Monkey
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/snowmonkey/config',
    description=""" Get current Snow Monkey config """,
    tags=['global_configuration_management', 'snow_monkey_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_snow_monkey_config():
    """
    Get current Snow Monkey config
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/snowmonkey/config',
    description=""" Update current Snow Monkey config """,
    tags=['snow_monkey_management', 'global_configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def patch_snow_monkey(body: Group = None):
    """
    Update current Snow Monkey config
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/snowmonkey/config',
    description=""" Update current Snow Monkey config """,
    tags=['snow_monkey_management', 'global_configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_snow_monkey(body: Group = None):
    """
    Update current Snow Monkey config
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/snowmonkey/outages',
    description=""" Reset Snow Monkey Outages for the day """,
    tags=['snow_monkey_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def reset_snow_monkey():
    """
    Reset Snow Monkey Outages for the day
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/snowmonkey/outages',
    description=""" Get all current Snow Monkey ourages """,
    tags=['snow_monkey_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_snow_monkey_outages():
    """
    Get all current Snow Monkey ourages
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/verifiers',
    description=""" Get all global JWT verifiers """,
    tags=['jwt_verifier_operations', 'global_auth_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def find_all_global_jwt_verifiers():
    """
    Get all global JWT verifiers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/verifiers',
    description=""" Create one global JWT verifiers """,
    tags=['jwt_verifier_operations', 'global_auth_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_global_jwt_verifier(body: GlobalJwtVerifier = None):
    """
    Create one global JWT verifiers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/verifiers/{verifierId}',
    description=""" Delete one global JWT verifiers """,
    tags=['jwt_verifier_operations', 'global_auth_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_global_jwt_verifier(verifier_id: str = Path(..., alias='verifierId')):
    """
    Delete one global JWT verifiers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/verifiers/{verifierId}',
    description=""" Get one global JWT verifiers """,
    tags=['jwt_verifier_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def find_global_jwt_verifiers_by_id(verifier_id: str = Path(..., alias='verifierId')):
    """
    Get one global JWT verifiers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/verifiers/{verifierId}',
    description=""" Update one global JWT verifiers """,
    tags=['global_auth_management', 'jwt_verifier_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def patch_global_jwt_verifier(
    verifier_id: str = Path(..., alias='verifierId'), body: Patch = None
):
    """
    Update one global JWT verifiers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/verifiers/{verifierId}',
    description=""" Update one global JWT verifiers """,
    tags=['jwt_verifier_operations', 'global_auth_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_global_jwt_verifier(
    verifier_id: str = Path(..., alias='verifierId'), body: GlobalJwtVerifier = None
):
    """
    Update one global JWT verifiers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/health',
    description=""" Import the full state of Otoroshi as a file """,
    tags=['health_check_operations', 'live_statistics_monitoring'],
)
def health():
    """
    Return current Otoroshi health
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/lines',
    description=""" Get all environments provided by the current Otoroshi instance """,
    tags=['environment_management_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def all_lines():
    """
    Get all environments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/lines/{line}/services',
    description=""" Get all services for an environment provided by the current Otoroshi instance """,
    tags=['environment_management_operations', 'service_group_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def services_for_a_line(line: str):
    """
    Get all services for an environment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/new/apikey',
    description=""" Get a template of an Otoroshi Api Key. The generated entity is not persisted """,
    tags=['api_key_operations', 'template_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def initiate_api_key():
    """
    Get a template of an Otoroshi Api Key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/new/group',
    description=""" Get a template of an Otoroshi service group. The generated entity is not persisted """,
    tags=['service_group_operations', 'template_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def initiate_service_group():
    """
    Get a template of an Otoroshi service group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/new/service',
    description=""" Get a template of an Otoroshi service descriptor. The generated entity is not persisted """,
    tags=[
        'service_descriptor_management',
        'service_template_handling',
        'template_management',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def initiate_service():
    """
    Get a template of an Otoroshi service descriptor
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
